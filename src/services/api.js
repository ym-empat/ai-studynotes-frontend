import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;
const API_KEY = import.meta.env.VITE_API_KEY;

// –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
console.log('üîß Environment variables check:', {
  API_BASE_URL: API_BASE_URL,
  API_KEY: API_KEY ? 'SET' : 'NOT SET',
  API_KEY_LENGTH: API_KEY ? API_KEY.length : 0
});

// –°—Ç–≤–æ—Ä—é—î–º–æ axios instance –∑ –±–∞–∑–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
    'x-api-key': API_KEY,
  },
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID —Ç–æ–∫–µ–Ω)
export const setAuthHeaders = (idToken) => {
  console.log('üîß setAuthHeaders called with:', {
    hasIdToken: !!idToken,
    idTokenType: typeof idToken,
    idTokenLength: idToken ? idToken.length : 0
  });
  
  if (idToken) {
    const tokenString = typeof idToken === 'string' ? idToken : idToken.toString();
    apiClient.defaults.headers.common['Authorization'] = `Bearer ${tokenString}`;
    console.log('‚úÖ Authorization header set (ID Token):', `Bearer ${tokenString.substring(0, 20)}...`);
  } else {
    delete apiClient.defaults.headers.common['Authorization'];
    console.log('‚ùå Authorization header removed');
  }
  
  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
  console.log('üîß Current API client headers:', {
    Authorization: apiClient.defaults.headers.common['Authorization'] ? 'SET' : 'NOT SET',
    'x-api-key': apiClient.defaults.headers.common['x-api-key'] ? 'SET' : 'NOT SET'
  });
};

// Request interceptor –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
apiClient.interceptors.request.use(
  (config) => {
    console.log('üöÄ API Request:', {
      method: config.method?.toUpperCase(),
      url: config.url,
      baseURL: config.baseURL,
      fullURL: `${config.baseURL}${config.url}`,
      headers: {
        'Authorization': config.headers.Authorization ? 'Bearer [TOKEN]' : 'None',
        'x-api-key': config.headers['x-api-key'] ? '[SET]' : 'None',
        'Content-Type': config.headers['Content-Type'] || 'None'
      }
    });
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è CORS –ø—Ä–æ–±–ª–µ–º
    if (config.url === '/tasks') {
      console.log('üîç Detailed request info:', {
        method: config.method,
        url: config.url,
        baseURL: config.baseURL,
        fullURL: `${config.baseURL}${config.url}`,
        headers: config.headers
      });
    }
    
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
apiClient.interceptors.response.use(
  (response) => {
    console.log('‚úÖ API Response:', {
      status: response.status,
      url: response.config.url
    });
    return response;
  },
  async (error) => {
    console.error('‚ùå API Error:', {
      status: error.response?.status,
      message: error.response?.data?.message || error.message,
      url: error.config?.url
    });

    // –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ 401 –ø–æ–º–∏–ª–∫—É, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω–∏
    if (error.response?.status === 401) {
      console.log('üîÑ 401 Unauthorized - attempting token refresh');
      
      try {
        // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ CognitoService –¥–∏–Ω–∞–º—ñ—á–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        const { CognitoService } = await import('./cognitoService.js');
        const session = await CognitoService.getCurrentSession();
        
        if (session?.tokens) {
          // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –Ω–æ–≤–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
          setAuthHeaders(session.tokens.idToken.toString());
          
          // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
          const originalRequest = error.config;
          originalRequest.headers.Authorization = `Bearer ${session.tokens.idToken.toString()}`;
          
          console.log('üîÑ Retrying request with refreshed tokens');
          return apiClient(originalRequest);
        } else {
          console.log('‚ùå No valid session found for token refresh');
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É
          window.location.href = '/login';
        }
      } catch (refreshError) {
        console.error('‚ùå Token refresh failed:', refreshError);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É
        window.location.href = '/login';
      }
    }

    return Promise.reject(error);
  }
);

// –¢–∏–ø–∏ –¥–∞–Ω–∏—Ö
export const StudyItemStatus = {
  DONE: 'DONE',
  PROCESSING: 'PROCESSING',
  QUEUED: 'QUEUED',
};

export const StudyItem = {
  id: '',
  topic: '',
  status: StudyItemStatus.TODO,
  createdAt: '',
  updatedAt: '',
};

export const StudyItemsResponse = {
  items: [],
  cursor: null,
};

/**
 * –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∑ –∫—É—Ä—Å–æ—Ä –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
 * @param {string} cursor - –ö—É—Ä—Å–æ—Ä –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
 * @param {number} limit - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10)
 * @returns {Promise<StudyItemsResponse>}
 */
export const fetchStudyItems = async (cursor = null, limit = 10) => {
  try {
    const params = { limit };
    if (cursor) {
      params.cursor = cursor;
    }

    const response = await apiClient.get('/tasks', { params });
    return response.data;
  } catch (error) {
    console.error('Error fetching study tasks:', error);
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API.');
  }
};

/**
 * –û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª
 * @param {string} id - ID –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É
 * @returns {Promise<StudyItem>}
 */
export const fetchStudyItem = async (id) => {
  try {
    const response = await apiClient.get(`/tasks/${id}`);
    return response.data;
  } catch (error) {
    console.error('Error fetching study item:', error);
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª—É.');
  }
};

/**
 * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –Ω–∞–≤—á–∞–ª—å–Ω—É –∑–∞–≤–¥–∞–Ω–Ω—è
 * @param {string} topic - –¢–µ–º–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
 * @returns {Promise<StudyItem>}
 */
export const createStudyTask = async (topic) => {
  try {
    const response = await apiClient.post('/tasks', { topic });
    return response.data;
  } catch (error) {
    console.error('Error creating study task:', error);
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.');
  }
};

/**
 * –í–∏–¥–∞–ª—è—î –Ω–∞–≤—á–∞–ª—å–Ω—É –∑–∞–≤–¥–∞–Ω–Ω—è
 * @param {string} id - ID –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
 * @returns {Promise<void>}
 */
export const deleteStudyTask = async (id) => {
  try {
    await apiClient.delete(`/tasks/${id}`);
  } catch (error) {
    console.error('Error deleting study task:', error);
    throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API.');
  }
};

export default apiClient;
