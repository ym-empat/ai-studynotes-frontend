import { signUp, confirmSignUp, resendSignUpCode, signIn, signOut, getCurrentUser, fetchAuthSession } from 'aws-amplify/auth';
import { Amplify } from 'aws-amplify';

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Amplify –¥–ª—è v6
const amplifyConfig = {
  Auth: {
    Cognito: {
      userPoolId: 'eu-central-1_liScrW4G3',
      userPoolClientId: '35ktssblhrugrug23uvbtsbm5r',
      loginWith: {
        email: true,
        username: false,
        phone: false,
      }
    }
  }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Amplify (—Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑)
let isInitialized = false;
if (!isInitialized) {
  Amplify.configure(amplifyConfig);
  isInitialized = true;
}

export class CognitoService {
  /**
   * –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {Object} userData - –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {string} userData.email - Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {string} userData.password - –ü–∞—Ä–æ–ª—å
   * @param {string} userData.name - –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
   */
  static async signUp(userData) {
    try {
      console.log('üöÄ Cognito signUp:', { email: userData.email, name: userData.name });
      
      const { isSignUpComplete, userId, nextStep } = await signUp({
        username: userData.email,
        password: userData.password,
        options: {
          userAttributes: {
            email: userData.email,
            name: userData.name,
          },
          autoSignIn: true,
        }
      });

      console.log('‚úÖ Cognito signUp success:', { isSignUpComplete, userId, nextStep });
      return {
        success: true,
        userSub: userId,
        needsConfirmation: !isSignUpComplete,
        message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.'
      };
    } catch (error) {
      console.error('‚ùå Cognito signUp error:', error);
      return {
        success: false,
        error: error.message || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó'
      };
    }
  }

  /**
   * –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –∫–æ–¥ –∑ email
   * @param {string} email - Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {string} code - –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
   */
  static async confirmSignUp(email, code) {
    try {
      console.log('üöÄ Cognito confirmSignUp:', { email, code });
      
      const { isSignUpComplete } = await confirmSignUp({
        username: email,
        confirmationCode: code
      });
      
      console.log('‚úÖ Cognito confirmSignUp success:', { isSignUpComplete });
      return {
        success: true,
        message: 'Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.'
      };
    } catch (error) {
      console.error('‚ùå Cognito confirmSignUp error:', error);
      return {
        success: false,
        error: error.message || '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è email'
      };
    }
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä–Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
   * @param {string} email - Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É
   */
  static async resendConfirmationCode(email) {
    try {
      console.log('üöÄ Cognito resendConfirmationCode:', { email });
      
      const { destination } = await resendSignUpCode({
        username: email
      });
      
      console.log('‚úÖ Cognito resendConfirmationCode success:', { destination });
      return {
        success: true,
        message: '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ!'
      };
    } catch (error) {
      console.error('‚ùå Cognito resendConfirmationCode error:', error);
      return {
        success: false,
        error: error.message || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É'
      };
    }
  }

  /**
   * –í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
   * @param {string} email - Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {string} password - –ü–∞—Ä–æ–ª—å
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥—É
   */
  static async signIn(email, password) {
    try {
      console.log('üöÄ Cognito signIn:', { email });
      
      const { isSignedIn, nextStep } = await signIn({
        username: email,
        password: password
      });
      
      console.log('‚úÖ Cognito signIn success:', { isSignedIn, nextStep });
      
      if (isSignedIn) {
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å–µ—Å—ñ—é
        const currentUser = await getCurrentUser();
        const session = await fetchAuthSession();
        
        return {
          success: true,
          user: currentUser,
          session: session,
          message: '–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!'
        };
      } else {
        return {
          success: false,
          error: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫—Ä–æ–∫–∏',
          nextStep: nextStep
        };
      }
    } catch (error) {
      console.error('‚ùå Cognito signIn error:', error);
      return {
        success: false,
        error: error.message || '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É'
      };
    }
  }

  /**
   * –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏—Ö–æ–¥—É
   */
  static async signOut() {
    try {
      console.log('üöÄ Cognito signOut');
      
      await signOut();
      
      console.log('‚úÖ Cognito signOut success');
      return {
        success: true,
        message: '–í–∏—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!'
      };
    } catch (error) {
      console.error('‚ùå Cognito signOut error:', error);
      return {
        success: false,
        error: error.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É'
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {Promise<Object|null>} –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ null
   */
  static async getCurrentUser() {
    try {
      const user = await getCurrentUser();
      return user;
    } catch (error) {
      console.log('No authenticated user');
      return null;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @returns {Promise<Object|null>} –¢–æ–∫–µ–Ω–∏ –∞–±–æ null
   */
  static async getCurrentSession() {
    try {
      const session = await fetchAuthSession();
      return session;
    } catch (error) {
      console.log('No current session');
      return null;
    }
  }
}

export default CognitoService;
