import { useState, useEffect, useCallback, createContext, useContext } from 'react';
import { CognitoService } from '../services/cognitoService';
import { setAuthHeaders } from '../services/api';
import apiClient from '../services/api';

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
const AuthContext = createContext();

// Provider –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isApiReady, setIsApiReady] = useState(false);
  const [user, setUser] = useState(null);
  const [tokens, setTokens] = useState(null);
  const [error, setError] = useState(null);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  useEffect(() => {
    console.log('üîÑ useAuth: Starting auth check on page load');
    checkAuthState();
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω–∞
  const isTokenValid = useCallback((tokenString) => {
    if (!tokenString) return false;
    
    try {
      const payload = JSON.parse(atob(tokenString.split('.')[1]));
      const currentTime = Math.floor(Date.now() / 1000);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞ (–∑ –∑–∞–ø–∞—Å–æ–º –≤ 5 —Ö–≤–∏–ª–∏–Ω)
      if (payload.exp && payload.exp < currentTime + 300) {
        console.log('‚ö†Ô∏è Token expired');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå Error validating token:', error);
      return false;
    }
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –≤ localStorage
  const saveTokensToStorage = useCallback((tokens) => {
    if (tokens && tokens.idToken) {
      try {
        const idTokenString = tokens.idToken.toString();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
        if (isTokenValid(idTokenString)) {
          localStorage.setItem('auth_tokens', JSON.stringify({
            idToken: idTokenString,
            accessToken: tokens.accessToken?.toString(),
            refreshToken: tokens.refreshToken?.toString(),
            timestamp: Date.now()
          }));
          console.log('‚úÖ Tokens saved to localStorage');
        } else {
          console.log('‚ö†Ô∏è Token invalid, not saving to localStorage');
          clearTokensFromStorage();
        }
      } catch (error) {
        console.error('‚ùå Error saving tokens to localStorage:', error);
      }
    }
  }, [isTokenValid]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ localStorage
  const loadTokensFromStorage = useCallback(() => {
    try {
      const savedTokens = localStorage.getItem('auth_tokens');
      if (savedTokens) {
        const parsedTokens = JSON.parse(savedTokens);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏ —Ç–æ–∫–µ–Ω–∏ (24 –≥–æ–¥–∏–Ω–∏)
        const isExpired = Date.now() - parsedTokens.timestamp > 24 * 60 * 60 * 1000;
        if (!isExpired && isTokenValid(parsedTokens.idToken)) {
          console.log('‚úÖ Tokens loaded from localStorage');
          return parsedTokens;
        } else {
          console.log('‚ö†Ô∏è Saved tokens expired or invalid, removing from storage');
          localStorage.removeItem('auth_tokens');
        }
      }
    } catch (error) {
      console.error('‚ùå Error loading tokens from localStorage:', error);
      localStorage.removeItem('auth_tokens');
    }
    return null;
  }, [isTokenValid]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∑ localStorage
  const clearTokensFromStorage = useCallback(() => {
    localStorage.removeItem('auth_tokens');
    console.log('‚úÖ Tokens cleared from localStorage');
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  useEffect(() => {
    console.log('üîß useAuth useEffect: Setting auth headers:', {
      isAuthenticated,
      hasTokens: !!tokens,
      hasIdToken: !!tokens?.idToken,
      isLoading
    });
    
    if (isAuthenticated && tokens?.idToken) {
      console.log('üîß useAuth useEffect: Setting headers with token');
      setAuthHeaders(tokens.idToken.toString());
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ API —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å
      setTimeout(() => {
        const currentAuthHeader = apiClient.defaults.headers.common['Authorization'];
        console.log('üîß useAuth useEffect: Verification - Authorization header:', currentAuthHeader ? 'SET' : 'NOT SET');
        setIsApiReady(!!currentAuthHeader);
      }, 150);
    } else {
      console.log('üîß useAuth useEffect: Clearing headers');
      setAuthHeaders(null);
      setIsApiReady(false);
    }
  }, [isAuthenticated, tokens]);

  const checkAuthState = async () => {
    try {
      console.log('üîç checkAuthState: Starting auth check...');
      setIsLoading(true);
      
      // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Cognito
      console.log('üîç checkAuthState: Checking Cognito session...');
      const currentUser = await CognitoService.getCurrentUser();
      const session = await CognitoService.getCurrentSession();
      
      console.log('üîç checkAuthState: Cognito results:', {
        hasUser: !!currentUser,
        hasSession: !!session,
        hasTokens: !!session?.tokens,
        userUsername: currentUser?.username
      });
      
      if (currentUser && session?.tokens) {
        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Cognito, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏
        setUser(currentUser);
        setTokens(session.tokens);
        setIsAuthenticated(true);
        saveTokensToStorage(session.tokens);
        console.log('‚úÖ User authenticated via Cognito:', currentUser.username);
        console.log('üîç User attributes on load:', currentUser.attributes);
      } else {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó Cognito, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–æ–∫–µ–Ω–∏
        console.log('üîç checkAuthState: No active Cognito session, checking localStorage...');
        const savedTokens = loadTokensFromStorage();
        console.log('üîç checkAuthState: localStorage results:', {
          hasSavedTokens: !!savedTokens,
          hasIdToken: !!savedTokens?.idToken
        });
        
        if (savedTokens && savedTokens.idToken) {
          // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫-–æ–±'—î–∫—Ç —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
          const mockTokens = {
            idToken: { toString: () => savedTokens.idToken },
            accessToken: { toString: () => savedTokens.accessToken },
            refreshToken: { toString: () => savedTokens.refreshToken }
          };
          
          setTokens(mockTokens);
          setIsAuthenticated(true);
          console.log('‚úÖ User authenticated via saved tokens');
          
          // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID —Ç–æ–∫–µ–Ω–∞
          try {
            const payload = JSON.parse(atob(savedTokens.idToken.split('.')[1]));
            const mockUser = {
              username: payload['cognito:username'] || payload.email,
              userId: payload.sub,
              attributes: {
                email: payload.email,
                name: payload.name || payload.given_name || payload.family_name
              }
            };
            setUser(mockUser);
            console.log('‚úÖ User info restored from saved tokens');
          } catch (tokenError) {
            console.error('‚ùå Error parsing saved token:', tokenError);
            // –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —Ç–æ–∫–µ–Ω, –æ—á–∏—â—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
            clearTokensFromStorage();
            setIsAuthenticated(false);
            setUser(null);
            setTokens(null);
          }
        } else {
          setIsAuthenticated(false);
          setUser(null);
          setTokens(null);
          console.log('‚ùå No authenticated user');
        }
      }
    } catch (error) {
      console.log('Auth check failed:', error);
      setIsAuthenticated(false);
      setUser(null);
      setTokens(null);
      clearTokensFromStorage();
    } finally {
      setIsLoading(false);
    }
  };

  const signIn = useCallback(async (email, password) => {
    try {
      setIsLoading(true);
      setError(null);
      
      const result = await CognitoService.signIn(email, password);
      
      if (result.success) {
        const session = await CognitoService.getCurrentSession();
        const currentUser = await CognitoService.getCurrentUser();
        
        if (session?.tokens && currentUser) {
          setTokens(session.tokens);
          setUser(currentUser);
          setIsAuthenticated(true);
          saveTokensToStorage(session.tokens);
          return { success: true };
        }
      }
      
      setError(result.error);
      return { success: false, error: result.error };
    } catch (error) {
      const errorMessage = error.message || '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setIsLoading(false);
    }
  }, []);

  const signOut = useCallback(async () => {
    try {
      setIsLoading(true);
      await CognitoService.signOut();
      setIsAuthenticated(false);
      setUser(null);
      setTokens(null);
      setError(null);
      clearTokensFromStorage();
    } catch (error) {
      console.error('Sign out error:', error);
      setError('–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É');
      // –ù–∞–≤—ñ—Ç—å —è–∫—â–æ Cognito signOut –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, –æ—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
      clearTokensFromStorage();
      setIsAuthenticated(false);
      setUser(null);
      setTokens(null);
    } finally {
      setIsLoading(false);
    }
  }, [clearTokensFromStorage]);

  const setTokensFromSession = useCallback((newTokens) => {
    setTokens(newTokens);
    if (newTokens) {
      setIsAuthenticated(true);
      saveTokensToStorage(newTokens);
    }
  }, [saveTokensToStorage]);

  // Get the access token for API requests
  const getAccessToken = useCallback(() => {
    return tokens?.accessToken?.toString() || null;
  }, [tokens]);

  // Get the ID token
  const getIdToken = useCallback(() => {
    return tokens?.idToken?.toString() || null;
  }, [tokens]);

  // Get user profile information
  const getUserProfile = useCallback(() => {
    if (user) {
      console.log('üîç User object:', user);
      console.log('üîç User attributes:', user.attributes);
      console.log('üîç User username:', user.username);
      console.log('üîç User userId:', user.userId);
      
      // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ ID —Ç–æ–∫–µ–Ω–∞
      const idToken = tokens?.idToken;
      if (idToken) {
        try {
          const payload = JSON.parse(atob(idToken.toString().split('.')[1]));
          console.log('üîç ID Token payload:', payload);
          
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ç–æ–∫–µ–Ω–∞ —è–∫ fallback
          const tokenEmail = payload.email || payload['cognito:username'];
          const tokenName = payload.name || payload.given_name || payload.family_name;
          
          console.log('üîç Token email:', tokenEmail);
          console.log('üîç Token name:', tokenName);
        } catch (error) {
          console.log('üîç Error parsing ID token:', error);
        }
      }
      
      // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
      let name = user.attributes?.name || 
                 user.attributes?.given_name || 
                 user.attributes?.family_name;
      
      // –Ø–∫—â–æ —ñ–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö, —Å–ø—Ä–æ–±—É—î–º–æ –∑ ID —Ç–æ–∫–µ–Ω–∞
      if (!name && idToken) {
        try {
          const payload = JSON.parse(atob(idToken.toString().split('.')[1]));
          name = payload.name || payload.given_name || payload.family_name;
          console.log('üîç Name from ID token:', name);
        } catch (error) {
          console.log('üîç Error parsing ID token for name:', error);
        }
      }
      
      // –Ø–∫—â–æ —ñ–º'—è –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É email
      if (!name) {
        const email = user.attributes?.email || user.username;
        console.log('üîç Email for name extraction:', email);
        if (email && email.includes('@')) {
          name = email.split('@')[0];
          // –†–æ–±–∏–º–æ –ø–µ—Ä—à—É –ª—ñ—Ç–µ—Ä—É –≤–µ–ª–∏–∫–æ—é
          name = name.charAt(0).toUpperCase() + name.slice(1);
        } else {
          name = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';
        }
      }
      
      console.log('üîç Extracted name:', name);
      
      // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ email –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
      let email = user.attributes?.email || user.username;
      
      // –Ø–∫—â–æ email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –∑ ID —Ç–æ–∫–µ–Ω–∞
      if (!email || email.includes('-') || email.length > 50) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ UUID
        if (idToken) {
          try {
            const payload = JSON.parse(atob(idToken.toString().split('.')[1]));
            email = payload.email || payload['cognito:username'];
            console.log('üîç Email from ID token:', email);
          } catch (error) {
            console.log('üîç Error parsing ID token for email:', error);
          }
        }
      }
      
      console.log('üîç Final email:', email);
      
      return {
        email: email,
        name: name,
        sub: user.userId
      };
    }
    return null;
  }, [user, tokens]);

  // Create authorization headers for API requests
  const getAuthHeaders = useCallback(() => {
    const token = getIdToken();
    if (token) {
      return {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      };
    }
    return {
      'Content-Type': 'application/json'
    };
  }, [getIdToken]);

  const value = {
    isAuthenticated,
    isLoading,
    isApiReady,
    user,
    tokens,
    error,
    signIn,
    signOut,
    setTokens: setTokensFromSession,
    getAccessToken,
    getIdToken,
    getUserProfile,
    getAuthHeaders,
    checkAuthState,
    saveTokensToStorage,
    loadTokensFromStorage,
    clearTokensFromStorage
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
